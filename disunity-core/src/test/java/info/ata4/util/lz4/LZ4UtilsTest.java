package info.ata4.util.lz4;

import com.diffblue.deeptestutils.Reflector;
import info.ata4.util.lz4.LZ4Utils.Match;
import info.ata4.util.lz4.LZ4Utils;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class LZ4UtilsTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: LZ4Utils */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 34 branch to line 35
   */

  @Test
  public void maxCompressedLengthInputNegativeOutputIllegalArgumentException() throws Throwable {

    // Arrange
    final int length = -576_454_656;

    // Act
    thrown.expect(IllegalArgumentException.class);
    try {
      final Class<?> classUnderTest = Reflector.forName("info.ata4.util.lz4.LZ4Utils");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod("maxCompressedLength", Reflector.forName("int"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(null, length);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 34 branch to line 36
   *  - conditional line 36 branch to line 37
   */

  @Test
  public void maxCompressedLengthInputPositiveOutputIllegalArgumentException() throws Throwable {

    // Arrange
    final int length = 2_113_929_216;

    // Act
    thrown.expect(IllegalArgumentException.class);
    try {
      final Class<?> classUnderTest = Reflector.forName("info.ata4.util.lz4.LZ4Utils");
      final Method methodUnderTest =
          classUnderTest.getDeclaredMethod("maxCompressedLength", Reflector.forName("int"));
      methodUnderTest.setAccessible(true);
      methodUnderTest.invoke(null, length);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 34 branch to line 36
   *  - conditional line 36 branch to line 39
   */

  @Test
  public void maxCompressedLengthInputPositiveOutputPositive()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    final int length = 1;

    // Act
    final Class<?> classUnderTest = Reflector.forName("info.ata4.util.lz4.LZ4Utils");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("maxCompressedLength", Reflector.forName("int"));
    methodUnderTest.setAccessible(true);
    final int retval = (int)methodUnderTest.invoke(null, length);

    // Assert result
    Assert.assertEquals(17, retval);
  }

}
