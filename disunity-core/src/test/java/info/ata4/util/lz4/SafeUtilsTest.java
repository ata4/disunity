package info.ata4.util.lz4;

import com.diffblue.deeptestutils.Reflector;
import info.ata4.util.lz4.SafeUtils;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class SafeUtilsTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: SafeUtils */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 39 branch to line 40
   */

  @Test
  public void checkLengthInputNegativeOutputIllegalArgumentException() {

    // Arrange
    final int len = -2_147_483_648;

    // Act
    thrown.expect(IllegalArgumentException.class);
    SafeUtils.checkLength(len);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 31 branch to line 32
   *  - conditional line 32 branch to line 33
   *  - conditional line 33 branch to line 33
   */

  @Test
  public void checkRangeInput0ZeroPositiveOutputArrayIndexOutOfBoundsException() {

    // Arrange
    final byte[] buf = {};
    final int off = 0;
    final int len = 32;

    // Act
    thrown.expect(ArrayIndexOutOfBoundsException.class);
    SafeUtils.checkRange(buf, off, len);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 31 branch to line 32
   *  - conditional line 32 branch to line 33
   *  - conditional line 33 branch to line 34
   *  - conditional line 34 branch to line 34
   */

  @Test
  public void checkRangeInput1ZeroPositiveOutputArrayIndexOutOfBoundsException() {

    // Arrange
    final byte[] buf = {(byte)0};
    final int off = 0;
    final int len = 32;

    // Act
    thrown.expect(ArrayIndexOutOfBoundsException.class);
    SafeUtils.checkRange(buf, off, len);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 25 branch to line 26
   */

  @Test
  public void checkRangeInputNullNegativeOutputArrayIndexOutOfBoundsException() {

    // Arrange
    final byte[] buf = null;
    final int off = -10_000_000;

    // Act
    thrown.expect(ArrayIndexOutOfBoundsException.class);
    SafeUtils.checkRange(buf, off);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 31 branch to line 31
   */

  @Test
  public void checkRangeInputNullPositiveNegativeOutputIllegalArgumentException() {

    // Arrange
    final byte[] buf = null;
    final int off = 2_147_483_641;
    final int len = -2_147_483_640;

    // Act
    thrown.expect(IllegalArgumentException.class);
    SafeUtils.checkRange(buf, off, len);

    // Method is not expected to return due to exception thrown
  }

}
